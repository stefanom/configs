#------------------------------ Aliases -----------------------------

alias ll='ls -l'
alias l='ls -lLhtrA'
alias dir='ls -la'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

alias s='source ~/.bashrc'
alias edit='code'
alias p='ps -aux'
alias pstree='pstree -g 2 -w'
alias mem_hogs='ps wwaxm -o pid,stat,vsize,rss,time,command | head -10'
alias lsock='sudo lsof -i -P'
alias size='du -m -d 1 | sort -n'
alias pyserver='python -m http.server 8888 --bind 127.0.0.1'
alias f='fzf'

alias lsb='git branch'
alias lst='git branch -r'
alias cdb='git checkout'
alias mkb='git checkout -b'
alias rmb='git branch -D'
alias mergebranch='git merge --squash'
alias diffbranch="git diff --color master..$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')"
alias commit='git commit -a -m "commit: $1"'
alias config='git --git-dir=$HOME/.cfg/ --work-tree=$HOME'

# ----------------------------- Functions ------------------------------

# pids: list the PIDs of the applications that match the given name
function pids() {
    ps -ax | grep -i $1 | grep -i -v  "grep.-i.$1" | awk '{print $1}'
}

# ports: list the processes listening to local ports
function ports() {
    lsof -nP -iTCP -sTCP:LISTEN
}

# k: kill the application that matches the given name
function k() {
    kill $(pids $1)
}

# w: search for a string in the files in the CWD and sort them by frequency of occurrence
function w() {
    grep -i -r "$1" . | grep -v svn | grep -v Binary | cut -d : -f 1 | sort | uniq -c | sort -n
}

# ww: search for a string in the files in the CWD and show the files, line number and highlight the string
function ww() {
    grep -irEH --color --line-number "$1" .
}

# sniff: watch the TCP traffic on the given interface and optional parameters (normally host or port)
function sniff() {
    sudo tcpdump -i $1 -A -s 0 -p -q -t -S -nn $2 $3
}

# ff:  to find a file under the current directory
function ff() {
    find . -name "$@" ;
}
# ffs: to find a file whose name starts with a given string
function ffs() {
    find . -name "$@"'*' ;
}
# ffe: to find a file whose name ends with a given string
function ffe() {
    find . -name '*'"$@" ;
}

# findword: search for a word in the Unix word list
function findword() {
    grep ^"$@"$ /usr/share/dict/words ;
}

# http_headers: get just the HTTP headers from a web page (and its redirects)
function http_headers () {
    curl -I -L $@ ;
}

# up: move up a directory until you hit one that matches a pattern
function up {
    cd $(pwd | sed "s/\.*\($1[^\/]*\).*/\1/")
}

# down: move down a directory until you hit one that matches a pattern
# (potentially slow)
function down {
    cd $(find . -type d -name $1 -print -quit)
}

# hh: A custom history search. It's basically like doing "history | grep foo",
# but it works like an un-ordered keyword search, and de-duplicates identical
# commands. When I see the item I want to run, I recall it with !num
# (num is the first column returned by history).
function hh {
    CMD="history | grep -vE '^[[:blank:]]*[[:digit:]]+[[:blank:]]+(history|gh)' | sort -k2 -k1nr | uniq -f1 | sort -n"
    for SEARCH_TERM in "$@"; do
        CMD="$CMD | grep \"$SEARCH_TERM\""
    done
    eval $CMD
}

# ssha: run ssh-agent and loads the default private key
function ssha {
    eval "$(ssh-agent -s)"
    ssh-add
}

# --------------------------- Prompt -------------------------------------------

# Outputs the current git branch name.
function git_branch_name() {
  local branch_name=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD 2> /dev/null)
  if [ "$branch_name" != "" ]; then
    echo " [git:${branch_name}]"
  fi
}

# Output the path relative to the git root or the pwd otherwise.
function path() {
  if [[ ${PWD} == ${HOME}* ]]; then
    local relative_path=$(pwd | sed "s%$HOME%~%")
    echo " ${relative_path}"
  else
    echo " ${PWD}"
  fi
}

# Setup the shell prompt.
function prompt() {
  local RESET="\[\033[0;0m\]"
  local BLACK="\[\033[0;30m\]"
  local BLACKBOLD="\[\033[1;30m\]"
  local RED="\[\033[0;31m\]"
  local REDBOLD="\[\033[1;31m\]"
  local GREEN="\[\033[0;32m\]"
  local GREENBOLD="\[\033[1;32m\]"
  local YELLOW="\[\033[0;33m\]"
  local YELLOWBOLD="\[\033[1;33m\]"
  local BLUE="\[\033[0;34m\]"
  local BLUEBOLD="\[\033[1;34m\]"
  local PURPLE="\[\033[0;35m\]"
  local PURPLEBOLD="\[\033[1;35m\]"
  local CYAN="\[\033[0;36m\]"
  local CYANBOLD="\[\033[1;36m\]"
  local WHITE="\[\033[0;37m\]"
  local WHITEBOLD="\[\033[1;37m\]"

  # prompt style is [username@host] [git_branch] /full/path/to/pwd/ ➜
  # Feel free to modify the colors by changing the ${} variables with the ones defined above.
  # You can also use alternative unicode prompt chars: ★►▸➤●
  export PS1="[${BLUE}\u${RESET}@${RED}${HOSTNAME}${RESET}]${YELLOW}\$(git_branch_name)${GREEN}\$(path)${RESET} ➜ "
}

# Invoke the prompt function to setup do the magic.
prompt

# --------------------------- SSH Stuff -------------------------------

function sshpipe() {
    # Configure ssh forwarding
    export SSH_AUTH_SOCK=$HOME/.ssh/agent.sock

    # need `ps -ww` to get non-truncated command for matching
    # use square brackets to generate a regex match for the process we want but that doesn't match the grep command running it!
    ALREADY_RUNNING=$(ps -auxww | grep -q "[n]piperelay.exe -ei -s //./pipe/openssh-ssh-agent"; echo $?)
    if [[ $ALREADY_RUNNING != "0" ]]; then
        if [[ -S $SSH_AUTH_SOCK ]]; then
            # not expecting the socket to exist as the forwarding command isn't running (http://www.tldp.org/LDP/abs/html/fto.html)
            echo "removing previous socket..."
            rm $SSH_AUTH_SOCK
        fi
        echo "Starting SSH-Agent relay..."
        # setsid to force new session to keep running
        # set socat to listen on $SSH_AUTH_SOCK and forward to npiperelay which then forwards to openssh-ssh-agent on windows
        (setsid socat UNIX-LISTEN:$SSH_AUTH_SOCK,fork EXEC:"npiperelay.exe -ei -s //./pipe/openssh-ssh-agent",nofork &) >/dev/null 2>&1
    fi
}

sshpipe

# --------------------------- Shell Stuff  ----------------------------

# remap up/down arrow to history search instead of history scrolling
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'

# --------------------------- Environment Variables ----------------------------

export EDITOR="code"
export PATH="$HOME/bin:$PATH"

#export RUSTC_WRAPPER=sccache

if [ -f ~/.bash_secrets ]; then
    . ~/.bash_secrets
fi